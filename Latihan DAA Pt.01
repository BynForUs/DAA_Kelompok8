{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOuLyL18BHFdmWYiulo5x9z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BynForUs/DAA_Kelompok8/blob/main/Latihan%20DAA%20Pt.01\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def linear_search(data, target):\n",
        "    \"\"\"Mencari item dengan memeriksa setiap elemen secara berurutan.\"\"\"\n",
        "    for i in range(len(data)):\n",
        "        if data[i] == target:\n",
        "            return f\"Buku '{target}' ditemukan pada indeks ke-{i}.\"\n",
        "    return f\"Buku '{target}' tidak ditemukan.\"\n",
        "\n",
        "katalog_buku = [\"Laut Bercerita\", \"Sapiens\", \"Filosofi Teras\"]\n",
        "print(linear_search(katalog_buku, \"Sapiens\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-KzEjVz80rP4",
        "outputId": "2e386883-a2b4-45cb-c8af-45067a676466"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Buku 'Sapiens' ditemukan pada indeks ke-1.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def binary_search(data_terurut, target):\n",
        "    \"\"\"Mencari item dalam daftar terurut dengan membagi daftar menjadi dua.\"\"\"\n",
        "    low = 0\n",
        "    high = len(data_terurut) - 1\n",
        "\n",
        "    while low <= high:\n",
        "        mid = (low + high) // 2\n",
        "        guess = data_terurut[mid]\n",
        "\n",
        "        if guess == target:\n",
        "            return f\"Buku '{target}' ditemukan pada indeks ke-{mid}.\"\n",
        "        elif guess < target:\n",
        "            low = mid + 1\n",
        "        else:\n",
        "            high = mid - 1\n",
        "\n",
        "    return f\"Buku '{target}' tidak ditemukan.\"\n",
        "\n",
        "katalog_terurut = [\"Filosofi Teras\", \"Laut Bercerita\", \"Sapiens\"]\n",
        "print(binary_search(katalog_terurut, \"Filosofi Teras\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZsKsfADD0raY",
        "outputId": "0ab3225e-4b58-4cbd-e74e-7d180a71f447"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Buku 'Filosofi Teras' ditemukan pada indeks ke-0.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import deque\n",
        "\n",
        "def find_shortest_path(graph, start, end):\n",
        "    \"\"\"Menemukan jalur terpendek dari satu titik ke titik lain menggunakan BFS.\"\"\"\n",
        "    queue = deque([(start, [start])])\n",
        "    visited = {start}\n",
        "\n",
        "    while queue:\n",
        "        (node, path) = queue.popleft()\n",
        "\n",
        "        if node == end:\n",
        "            return f\"Rute tercepat dari {start} ke {end} adalah: {' -> '.join(path)}\"\n",
        "\n",
        "        for neighbor in graph.get(node, []):\n",
        "            if neighbor not in visited:\n",
        "                visited.add(neighbor)\n",
        "                new_path = list(path)\n",
        "                new_path.append(neighbor)\n",
        "                queue.append((neighbor, new_path))\n",
        "\n",
        "    return \"Tidak ada jalur yang ditemukan.\"\n",
        "\n",
        "gedung_kampus = {\n",
        "    'A': ['B', 'C'],\n",
        "    'B': ['D'],\n",
        "    'C': ['E'],\n",
        "    'D': ['F'],\n",
        "    'E': ['F']\n",
        "}\n",
        "\n",
        "print(find_shortest_path(gedung_kampus, 'A', 'F'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IGBzI8J60w-p",
        "outputId": "1b313d96-2a25-4acc-9423-1afccdbccb9a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rute tercepat dari A ke F adalah: A -> B -> D -> F\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def validate_nim(nim):\n",
        "    \"\"\"Memeriksa apakah NIM valid (10 digit dan hanya angka).\"\"\"\n",
        "\n",
        "    if len(nim) != 10:\n",
        "        return f\"NIM '{nim}' tidak valid: panjang harus 10 digit.\"\n",
        "\n",
        "    if not nim.isdigit():\n",
        "        return f\"NIM '{nim}' tidak valid: hanya boleh berisi angka.\"\n",
        "\n",
        "    return f\"NIM '{nim}' valid.\"\n",
        "\n",
        "print(validate_nim(\"2021000102\"))\n",
        "print(validate_nim(\"2021xyz012\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cFvYbMmP0zMr",
        "outputId": "78624229-5d39-4709-b092-5d14580d78f0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NIM '2021000102' valid.\n",
            "NIM '2021xyz012' tidak valid: hanya boleh berisi angka.\n"
          ]
        }
      ]
    }
  ]
}